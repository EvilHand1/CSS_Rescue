*,
*::before,
*::after{
    box-sizing: border-box;
    margin:0;
    padding:0;
}
:root{
    --primary-color: #C3EEFA;
    --secondary-color: #805D3C;
    --size-bosmarmot:20dvw;


    --Arms-Appear:false;

    --Left-Claws-Appear:false;
    --Right-Claws-Appear: false;

    --Left-Arm-Top: false;
    --Right-Arm-Top: false;

    --Trigger-Nose: false;
    --Trigger-Ears: false;
}
body{
    min-block-size: 600dvh;
    background: linear-gradient(
        to bottom,
        var(--primary-color) 0 calc(var(--size-bosmarmot) * 0.8),
        var(--secondary-color) 0 100%
    );
    margin:0;
    /* height: 100dvh; */
    display:grid;
    place-items: center;
}

input {
	display:none;
}

/* ==BOSMARMOT= */
section:has(section){
    --size-line:calc(  var(--size-bosmarmot) / 100);
    width: var(--size-bosmarmot);
    aspect-ratio: 35/40;
    position: fixed;
    top: calc(var(--size-bosmarmot) * 0.6);
    animation: draaien linear;
    animation-timeline: scroll();
    animation-range-start: 30px;
    animation-iteration-count: 5;
    
    container-type: inline-size;

    & :nth-child(1n){
        position:absolute;
        border: var(--size-line) solid var(--border-color);
        background-color: var(--primary-color-groundhog);
        border-radius: 85% 85% 55% 55% / 75% 75% 95% 95%;
    }
}

section:has(> div){
    /* color pallete: https://www.color-hex.com/color-palette/1032945 */
    --primary-color-groundhog:#613522;
    --secondary-color-groundhog:#815d4e;
    --third-color-groundhog:#a0867a;
    --claw-color-groundhog:#dfd7d3;
    --border-color: black;
    --white:white;

    width:100%;
    height:100%;
    display:grid;
    justify-items: center;
    /* fur */
    & > label:first-child{
        top: 10%;
        width: 75%;
        height: 85%;
        background-color: var(--secondary-color-groundhog);
               &:has(input[value="--arm"]:not(:checked)){
                    cursor:pointer;
                }
            }
    /* head */
    & > :nth-child(2){
        bottom: 90%;
        width: 55%;
        height: 40%;
        
        /* snout */
        & > :first-child{
            bottom: 20%;
            left: 25%;
            width: 55%;
            height: 40%; 
            border-radius:80% 80% 80% 81% / 50% 50% 80% 81% ;
            background-color: var(--secondary-color-groundhog);
            

            & label:not(:last-of-type) {
                grid-area:1/1;	
                pointer-events:none;
                opacity:0;	
                width:100%;
                height:100%;	
                &:has( :checked ) + label{
                    pointer-events: all;
                }
            }

            /* nose */
            & > label:last-of-type{
                top: 15%;
                left: 35%;
                transform-origin: center;
                width: 35%;
                height: 40%; 
                border-radius:80% 80% 80% 81% / 50% 50% 80% 81% ;
                background-color: black;
            }

            /* teeth left*/
             & >div:nth-last-of-type(2), &>:last-child{
                top: 65%;
                left: 37%;
                transform-origin: center;
                width: 15%;
                height: 30%; 
                border-radius: 6% 0% 10% 10% / 0% 0% 100% 100%;
                background-color: #dfd7d3;
                border-top: none;     
            }

            /* teeth right */
            & >:last-child{
                left: 51%;    
            }
        }

        /* left eye */
    & > :nth-child(2), >:nth-child(3){
        --eye-closed: 75%;
        top: 20%;
        left: 25%;
        width: 20%;
        height: 20%;  
        border-radius: 100% 100% 100% 100% / 100% 100% 100% 100%;

        background-image:
        radial-gradient(circle at top, var(--primary-color-groundhog) var(--eye-closed), var(--secondary-color-groundhog) 0 calc(var(--eye-closed) * 1.2), transparent 0),
        radial-gradient(
        circle at bottom right, 
           black 50%,
           white 0
             );
            }

    /* right eye */
    & > :nth-child(3){
        top: 20%;
        left: 60%;
        background-image:
        radial-gradient(
            circle at top,
            var(--primary-color-groundhog) var(--eye-closed),
            var(--secondary-color-groundhog) 0 calc(var(--eye-closed) * 1.2),
            transparent 0),
        radial-gradient(
        circle at left, 
           black 50%,
         white 0
             );
    }

    /* left ear */
    & > :nth-child(4), & > :nth-child(5){
        top: -10%;
        left: 15%;
        width: 20%;
        height: 25%;
        border-radius: 100% 100% 100% 100% / 100% 100% 100% 100%;
        z-index: -1 ;
        background-image: 
        radial-gradient(
        circle, 
           var(--third-color-groundhog) .6vw,
         var(--primary-color-groundhog) 0
             );
    }
   
    /* right ear */
    & > :nth-child(5){
        top: -10%;
        left: 65%;
    }
    }
    /* left arm */
    & > fieldset:first-of-type,
    & > fieldset:nth-of-type(2){
        transform-origin: top;
        top: 15%;
        left: 10%;
        width: 20%;
        height: 60%; 
        rotate: 35deg;
        display:grid;
        
        /* This comes from Sannes code pen, but I did nest it with the help Niels
        https://codepen.io/shooft/pen/emYvarP
         */
        & label:not(:last-child) {
            grid-area:1/1;	
            pointer-events:none;
            opacity:0;	
            width:100%;
            height:100%;	
            &:has( :checked ) + label,
            &:first-child:has( ~ label:nth-last-child(2) :checked ){
                /* Niels told me to use a variable so that the priority doesn't need to be changed */
                pointer-events: var(--arm-pointer-events, all);
            }
        }
                
        /* The claw on the left hand */
        & >label:has(div) > :first-child{
            /* middle claw */
            rotate: 95deg;
            border-radius: 100% 0% 80% 30% / 80% 30% 100% 30%;            

            /* right claw */
            &::after, &::before{
                content:"";
                position:absolute;
                bottom: 150%;
                width: 110%;
                height: 120%;
                background-color: var(--claw-color-groundhog);
                border: var(--size-line) solid var(--border-color);
                border-radius: 100% 0% 80% 30% / 80% 30% 100% 30%;
            }
            /* left claw */
            &::before{
                bottom: -150%; 
            }
        }
    }

    /* Right arm */
    & > fieldset:nth-of-type(2){
        left: 70%;
        rotate: -35deg;
        /* The claw on the right hand */
        & >label:has(div) > :first-child{
            /* middle claw */
            rotate: -95deg;
            border-radius: 0% 100% 30% 80% / 30% 80% 30% 100%;            
            /* right claw */
            &::after, &::before{
                border-radius: 0% 100% 30% 80% / 30% 80% 30% 100%;
            }
            /* left claw */
            &::before{
                bottom: -180%;
            }
    }
}

    /* Left and right hands */
    & > fieldset:first-of-type > label:has(div),
    & > fieldset:nth-of-type(2) > label:has(div){ 
        bottom: -10%;
        width: 125%;
        height: 30%; 
        left: -15%;
        border-radius: 85% 85% 55% 55% / 75% 75% 95% 95%;
    }    
    /* the middle claws on the right and left hand */
   & >fieldset:first-of-type > label:has(div) > :first-child,
   &> fieldset:nth-of-type(2) > label:has(div) > :first-child{  
        bottom: -20%;
        left: 10%;
        width: 70%;
        height: 30%; 
        background-color: var(--claw-color-groundhog);
        z-index: -1;
    }

}

/* ==BELLYBUTTON== */
/* idea to change it to container style queres came from Dante */
/* turns arms off, turns clickable arms off */
@container style(--Arms-Appear:false){
    section:has(> div) {
        &>fieldset:first-of-type > label,
        &>fieldset:nth-of-type(2) > label{
            --arm-pointer-events: none;
            cursor:default;
        }
        &> fieldset:first-of-type{
       display:none;
        }
        &> fieldset:nth-of-type(2){
           display:none;
            pointer-events: none;
        }
    }
}

/* arm appears */
  @container style(--Arms-Appear:true){ section:has(> div) {
    &> fieldset:first-of-type{
        animation: flickerBorder 1s linear;
        }
    &> fieldset:nth-of-type(2){
        animation: invisible 1s linear, flickerBorder 1s linear 1s;
        }
}
  }

/* ==BELLYANIMATIONS== */
@keyframes invisible {
    0%, 100%{
        border-color: transparent;
      background-color: transparent;
    }
}
@keyframes flickerBorder {
    0%, 20%, 40%, 60%, 80%, 100%{
      border-color: transparent;
      background-color: transparent;
    }
    10%, 30%, 50%, 70%, 90% {
      border-color: white;
      background-color: transparent;
    }
  }

  
  /* ==ARMBUTTONS== */
section:has(input[value="--Left-Arm-1"]:checked) section:has(> div) > :nth-child(3){transform: rotate(10deg);}
section:has(input[value="--Left-Arm-2"]:checked) section:has(> div) > :nth-child(3){transform: rotate(30deg);}
section:has(input[value="--Left-Arm-3"]:checked) section:has(> div) > :nth-child(3){transform: rotate(50deg);}
section:has(input[value="--Left-Arm-4"]:checked) section:has(> div) > :nth-child(3){transform: rotate(70deg);}
section:has(input[value="--Left-Arm-5"]:checked) section:has(> div) > :nth-child(3){transform: rotate(90deg);}
section:has(input[value="--Right-Arm-1"]:checked) section:has(> div) > :nth-child(4){transform: rotate(-10deg);}
section:has(input[value="--Right-Arm-2"]:checked) section:has(> div) > :nth-child(4){transform: rotate(-30deg);}
section:has(input[value="--Right-Arm-3"]:checked) section:has(> div) > :nth-child(4){transform: rotate(-50deg);}
section:has(input[value="--Right-Arm-4"]:checked) section:has(> div) > :nth-child(4){transform: rotate(-70deg);}
section:has(input[value="--Right-Arm-5"]:checked) section:has(> div) > :nth-child(4){transform: rotate(-90deg);}

/* head is off */
@container style(--Left-Arm-Top:false) or style(--Right-Arm-Top:false){
    section:has(> div) > :nth-child(2){
        display: none;
    }
}

/* changes cursor of the arms */
@container style(--Left-Arm-Top:false) or style(--Right-Arm-Top:false){ @container style(--Arms-Appear:true){
    section:has(>div){
    &>fieldset:first-of-type > label:not(:last-child),
    &> fieldset:nth-of-type(2) > label:not(:last-child){
        cursor:pointer;
    }}
}}

/* triggers head and arm animations, turns off clickable arms */
@container style(--Left-Arm-Top:true) and style(--Right-Arm-Top:true){
section:has(> div){
   & > :nth-child(2){
    animation: HeadBalloon 2s linear;
    }
    & > fieldset:first-of-type{
        animation: LowerArms 2s linear forwards;
        --start:90deg;
        & > label:not(:last-child){
           --arm-pointer-events: none;
        }
    }
    & > fieldset:nth-of-type(2){
        animation: LowerArms 2s linear forwards;
        --start:-90deg;
        & > label:not(:last-child){
            --arm-pointer-events: none;
        }
    }
}}
/* ==ARMANIMATIONS== */
@keyframes HeadBalloon {
    0%{
        transform-origin: bottom;
        transform:scaleY(0%) translateY(50%);
        z-index: -1;
    }
    40%, 60%{
        transform: scaleY(50%) translateY(50%);
        z-index: -1;
    }
    90%{
        transform:translateY(-25%);
    }
    100%{
        transform:scaleY(100%) translateY(0%);
    }
}
@keyframes LowerArms {
    from{
        transform: rotate(var(--start));
    }
    to{
        transform: rotate(0deg)
    }
}

/* ==SNOUTBUTTON== */

section:has(input[value="--Rotate-Snout-1"]:checked) section:has(> div) > :nth-child(2) > :first-child{transform: rotateZ(160deg);}
section:has(input[value="--Rotate-Snout-2"]:checked) section:has(> div) > :nth-child(2) > :first-child{transform: rotateZ(120deg);}
section:has(input[value="--Rotate-Snout-3"]:checked) section:has(> div) > :nth-child(2) > :first-child{transform: rotateZ(80deg);}
section:has(input[value="--Rotate-Snout-4"]:checked) section:has(> div) > :nth-child(2) > :first-child{transform: rotateZ(40deg);}
section:has(input[value="--Rotate-Snout-5"]:checked) section:has(> div) > :nth-child(2) > :first-child{transform: rotateZ(0deg);}

/* changes cursor of snout, turns off nose and teeth*/
@container style(--Trigger-Nose:false){
    section:has(>div){
        &>:nth-child(2) > :first-child {
            &>label{
                background-color: red;
                /* cursor:pointer; */
            }
        & label:last-of-type {
   display:none;
       }
       & >div{
        display:none;
    }}       
}}

/* activates snout and nose animation */
@container style(--Trigger-Nose:true){
   section:has(>div) >:nth-child(2) > :first-child{
  animation:SnoutCorrect 2s linear forwards .2s;
   --scale: 3;
   --rotateY: 180deg;
        &> label:last-of-type{
            animation:invisible 1s linear, SnoutCorrect 2s linear 1.2s;
            --rotateZ: 360deg;
            --scale: 3;
            --rotateY: 0deg;
            cursor:pointer;
        }
        & >div{
            display:none;
        }
}}
/* ==SNOUTANIMATIONS== */
@keyframes SnoutCorrect {
0%{
    transform: scale(1, 1) rotateY(0deg) rotateZ(0deg);
    z-index: 3;
}
50%{
    transform: scale(var(--scale), var(--scale)) rotateY(var(--rotateY, 0)) rotateZ(var(--rotateZ, 0));
    z-index: 3;
}
100%{
    transform: scale(1, 1) rotateY(var(--rotateY, 0)) rotateZ(calc(var(--rotateZ, 0deg) * 2));
    z-index: 3;
}}


  /* ==NOSEBUTTON== */
  /* Hands hidden, Ears hidden */
@container style(--Trigger-Ears:false){
    section:has(>div){
        &> fieldset:first-of-type >label:has(div),
        &> fieldset:nth-of-type(2) >label:has(div){
               display: none;
            }
        &>:nth-child(2){
        & > div:nth-of-type(3),& > div:nth-of-type(4){
        display:none;
    }}
}}
  /* Hands appear, Ears appear, Eyes open, nose cursor normal */
@container style(--Trigger-Ears:true){
    section:has(>div){
        &> fieldset:first-of-type >label:has(div){
            animation:invisible 3s linear, flickerBorder 1s linear 3s;
            cursor: pointer;
        }
        &> fieldset:nth-of-type(2) >label:has(div){
            animation:invisible 4s linear, flickerBorder 1s linear 4s;
            cursor: pointer;
        }

        /* turn off cursor on nose */
    &>:nth-child(2){
        &> :first-child > label:last-of-type{
            cursor: default;
        }

        &> div:nth-of-type(1), &> div:nth-of-type(2){
            --eye-closed: 75%;
            animation: 
            /* Sanne heeft me geholpen met de animation iteration samen te voegen met de animation functie. */
                blink .4s linear 4 2s, 
                blink 2s linear infinite 3.5s;
        }

        & > div:nth-of-type(3){
        animation:TriggerEars 2s linear;
    }
    & > div:nth-of-type(4){
        animation:TriggerEars 2s linear;
        --first: -40%;
        --second: -130%;
        --third:-275%;
        --fourth:-253%;
    }}
}}

/* ==NOSEANIMATIONS= */
@keyframes blink {
    0% {
        --eye-closed: 75%;
    }
    25%{
        --eye-closed: 0%;
    }
}

@keyframes TriggerEars {
    0%{
        transform:translate(var(--first, 40%), 75%);
    }
    25%{
        transform:translate(0%, -20%);
    }
    50%{
        transform: translate(var(--second, 130%), -60%);
    }
    75%{ 
        transform: translate(var(--third, 275%), -20%);
    }
    100%{
        transform: translate(var(--fourth, 253%), 0%);
    }
}

/* ==CLAWBUTTONS== */
@container style(--Left-Claws-Appear:false){section:has(> div) > fieldset:first-of-type > label:has(div) > :first-child{display:none;}}
@container style(--Left-Claws-Appear:true){ section:has(> div) > fieldset:first-of-type > label:has(div) {
    cursor: default;
    &> :first-child{
        animation: claw .5s linear; --start: -55%;}}}
@container style(--Right-Claws-Appear:false){section:has(> div) > fieldset:nth-of-type(2) > label:has(div) > :first-child{display:none;}}
@container style(--Right-Claws-Appear:true){section:has(> div) > fieldset:nth-of-type(2) > label:has(div){ 
    cursor: default;
    &> :first-child{
        animation: claw .5s linear; --start: 55%;}}}
   
/* ==CLAWANIMATION== */
/* Chat GPT told me I could use a variable for the start when I asked if there was a way not to have the animation double. */
@keyframes claw {
from {
transform: translateX(var(--start));
}
to{
transform: translateX(0%)
}
}


/* ==OTHER== */
html:has([value="--arm"]:checked) {
    --Arms-Appear: true;
  }

  html:has([value="--RightClaw"]:checked) {
    --Right-Claws-Appear:true;
  }
  html:has([value="--LeftClaw"]:checked) {
    --Left-Claws-Appear:true;
  }

  html:has([value="--Left-Arm-5"]:checked) {
    --Left-Arm-Top: true;
  }
  html:has([value="--Right-Arm-5"]:checked) {
    --Right-Arm-Top: true;
  }

  html:has([value="--Rotate-Snout-5"]:checked) {
    --Trigger-Nose: true;
  }
 
  html:has([value="--Trigger-Ears"]:checked) {
    --Trigger-Ears: true;
  }
  
